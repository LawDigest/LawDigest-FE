---
description: 타입 선언 룰
globs: app/**/types/**/*.ts
alwaysApply: false
---

# 🎯 타입 선언 및 주석 규칙

## 선언 키워드

- **객체 모양**이면 `interface`
- **유니온·맵핑·제너릭**이면 `type`
- DTO는 `…Dto` 접미사 인터페이스로 분리 유지, types/dto 폴더에 따로 정의

## JSDoc (TSDoc) 규칙

1. **타입 선언 바로 위**에 `/** */` 주석 블록 필수
2. 요약 설명은 “요약 문단” (summary)으로, 첫 문장에 타입 목적 기재
3. **Core block 태그** 사용:
   - `@description <간단설명>`
   - `@typeParam` (제너릭 있을 경우)
   - DTO 또는 타입이 **다른 타입 or 매핑 함수와 연관**될 경우, `@see {@link OtherSymbol}` 형식으로 명시
   - `@example`, `@deprecated` 등 상황에 따라
4. **필드별 주석**도 `/** */` 단일 블록 위에 선언
   - `@description <필드 의미>` 또는 `@defaultValue <기본값>`, `@see`, `@link` 등
5. DTO 인터페이스는 `@category DTO` 태그 추가 권장 (도구에 따라 도움)

---

### 올바른 예시

```ts
/**
 * @description 사용자 정보를 담는 도메인 타입
 */
export interface User {
  /**
   * @description 고유 ID (UUID 문자열)
   */
  id: string;

  /**
   * @description 로그인 이메일
   */
  email: string;

  /**
   * @description 사용자 분류 타입
   * @see {@link UserType} (사용자 분류 타입)
   */
  user_type: UserType;

  /**
   * @description 활성화 여부, 기본값은 false
   * @defaultValue false
   */
  isActive?: boolean;
}

/**
 * @description API /users POST 요청에 사용되는 사용자 생성 DTO
 * @see {@link User} (도메인 엔티티 타입)
 */
export interface CreateUserDto {
  /**
   * @description 클라이언트 입력의 사용자 이름
   * @defaultValue ''
   */
  name: string;

  /**
   * @description 클라이언트 입력의 이메일 주소
   */
  email: string;
}

/**
 * @description API /users PUT 요청에 사용되는 사용자 수정 DTO
 * @see {@link User} (도메인 엔티티 타입)
 */
export type UpdateUserDto = Partial<CreateUserDto>;
```

### 잘못된 예

1. 주석 없이 선언된 타입
2. type User = {…} 처럼 객체에도 type 사용
3. @field, @member 같은 비표준 태그
4. 전체 interface에 모든 필드 설명을 한 주석에 몰아쓰기
