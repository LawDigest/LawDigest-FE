---
description: React Hook Form + Zod 폼 작성 룰
globs: app/**/{validation,components}/**/*.{ts,tsx}
alwaysApply: false
---

## 목표

- 스키마 중심의 타입 안전 폼, 높은 접근성, 재사용 가능한 폼 구성 요소 확립

## 구조

- 스키마: 도메인별 `validation/`에 Zod 스키마 정의
- 폼 UI: 도메인 `components/`에 배치, 공용 필드는 `app/common/components/`

## 템플릿

```tsx
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm, FormProvider, Controller } from 'react-hook-form';

const Schema = z.object({ email: z.string().email(), password: z.string().min(8) });
type FormValues = z.infer<typeof Schema>;

export function SignInForm() {
  const methods = useForm<FormValues>({ resolver: zodResolver(Schema), mode: 'onTouched' });
  const {
    handleSubmit,
    control,
    formState: { errors, isSubmitting },
  } = methods;

  const onSubmit = (v: FormValues) => {
    /* mutate */
  };

  return (
    <FormProvider {...methods}>
      <form onSubmit={handleSubmit(onSubmit)} noValidate>
        <Controller
          name="email"
          control={control}
          render={({ field }) => (
            <input {...field} type="email" aria-invalid={!!errors.email} aria-describedby="email-err" />
          )}
        />
        {errors.email && (
          <p id="email-err" role="alert">
            {errors.email.message}
          </p>
        )}

        <Controller
          name="password"
          control={control}
          render={({ field }) => (
            <input {...field} type="password" aria-invalid={!!errors.password} aria-describedby="pw-err" />
          )}
        />
        {errors.password && (
          <p id="pw-err" role="alert">
            {errors.password.message}
          </p>
        )}

        <button type="submit" disabled={isSubmitting}>
          로그인
        </button>
      </form>
    </FormProvider>
  );
}
```

## 베스트 프랙티스

- `mode: 'onTouched' | 'onBlur'` 권장, 비필수 즉각 검증 지양
- 컴포넌트 내부에서 `useFormContext`로 중첩 필드 구성
- 커스텀 입력(shadcn)에는 `Controller`로 제어 컴포넌트 연결
- `defaultValues`는 스키마와 일치, 서버 데이터 프리필 시 `reset`
- `aria-invalid`/`aria-describedby`로 오류 연결, 오류 메시지는 `role="alert"`
- 입력 스키마와 서버 전송 스키마가 다르면 Zod `.transform`을 사용해 일관성 유지
- 같은 스키마를 API와 폼에서 공유하여 타입/에러 메시지의 일관성 확보
