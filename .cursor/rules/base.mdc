---
description: 프로젝트 기본 룰
globs: app/**/*
alwaysApply: false
---

## 1. 디렉토리 & 파일 구조

- 루트에 `app/` 사용 (Next.js 14/15 App Router)
- 도메인별로 폴더를 분리하고, 서비스 레이어는 각 도메인 루트에 `services/`로 모읍니다

```txt
app/
  layout.tsx
  page.tsx

  common/                 ← 전역 공용 (UI, 상수, 유틸 등)
    components/           ← 전역 재사용 컴포넌트 (shadcn 포함)
    constants/
    lib/                  ← http 클라이언트(apiClient) 등
    hooks/
    utils/

  bill/                   ← 도메인 (bill, congressman, party, search, following, notification, timeline, user…)
    services/
      apis.ts             ← API 메서드 (Axios 순수 함수)
      query-keys.ts       ← 쿼리 키 팩토리
      queries.ts          ← 조회 훅 (Query/InfiniteQuery)
      mutations.ts        ← 변경 훅 (Mutation)
    components/
    types/
      dto/
    constants/
    validation/           ← zod 스키마 (해당 도메인 폼용)
    layout.tsx
    page.tsx
    [id]/                 ← 동적 세그먼트(페이지 전용). services는 항상 도메인 루트에 위치
      page.tsx

public/
styles/
stories/                  ← Storybook 스토리
tests/                    ← Vitest + RTL 유닛/통합 테스트
e2e/                      ← Playwright E2E
```

- 기존 `app/{domain}/apis/*`는 `app/{domain}/services/*`로 점진 이전 권장
- 공유 로직은 `app/common/*`에 위치. 도메인 간 공유가 아니면 각 도메인 내부 유지

## 2. 서비스 레이어 규칙

- API/쿼리/뮤테이션은 UI와 분리. React 훅은 `queries.ts`/`mutations.ts`에, 네트워크는 `apis.ts`에만 존재
- 쿼리 키는 `query-keys.ts` 팩토리에서만 생성/재사용
- SSR 프리패치는 서버 레이어에서 `QueryClient`로 수행하고, 클라이언트는 `HydrationBoundary`로 복원
- 자세한 규칙은 `apis`/`react-query` 룰 문서를 참고

## 2.1 검증(Validation) 원칙

- 외부 경계(API/URL/Storage/Env/Analytics/SEO)에서 Zod로 런타임 검증 및 정규화
- 스키마는 도메인 `validation/`에 정의하고 타입은 `z.infer`로만 생성
- 입력/출력이 다르면 `.transform`으로 서버/클라이언트 간 모양 차이를 흡수

## 3. 데이터/상태 관리

- 원격 서버 상태: TanStack Query (캐싱/무효화/옵티미스틱)
- 로컬/글로벌 UI 상태: Zustand (모달, 토스트, 임시 필터 등). 원격 상태 대체 용도로 사용 금지
- 스토어는 `app/common/store/` 혹은 도메인 전용 스토어는 `{domain}/store/`

## 4. 폼 & 검증

- React Hook Form + Zod 조합 기본
- 스키마는 도메인별 `validation/`에 정의, 공용 스키마는 `app/common/validation/`
- `zodResolver` 사용, 폼 컴포넌트는 접근성 속성(`aria-invalid`, `aria-describedby`)을 준수

## 5. 스타일

- TailwindCSS 사용. 의미 있는 유틸 클래스 조합만 사용하고 임의 색상보다는 테마 토큰 사용
- shadcn UI 컴포넌트는 접근성 프리셋이 포함되어 있으므로 우선 사용
- 다크모드: `next-themes`를 통해 `class` 전략 유지

## 6. 테스트 & 스토리북

- Vitest + RTL: `tests/`에 유닛/통합 테스트. 쿼리 훅은 MSW로 네트워크 모킹 권장
- Playwright: `e2e/`에 시나리오 테스트, 중요 사용자 플로우 커버
- Storybook: `stories/`에 CSF3 스토리, 컨트롤/Docs 작성. 접근성 애드온 사용 권장

## 7. SEO & 접근성

- SEO: Next `metadata`/`generateMetadata` 활용, OG/Twitter 카드, canonical/robots/sitemap 반영
- 접근성: 시맨틱 태그, 포커스 이동/트랩, 키보드 탐색, 대체 텍스트/레이블, 대비 준수
- 상세 체크리스트는 `seo-a11y` 룰 문서 참고

## 8. 네이밍 & 코드 규칙

- 파일: kebab-case, React 컴포넌트 파일은 PascalCase 허용
- 컴포넌트/훅/스토어: PascalCase/`useXxx`/`useXxxStore`
- Barrel 파일(`index.ts`)은 선택적으로 사용하되, 과도한 재노출 지양
- 기본 포맷팅/린트: Prettier + ESLint(Airbnb + React Hooks + jsx-a11y) 기준 준수

- 페이지는 `app/` 폴더에 라우트 기준 정리, 서버 컴포넌트 우선. 클라이언트 필요 시 상단에 `use client`
