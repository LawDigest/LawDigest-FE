---
description: Zustand 스토어 작성 룰 (전역/도메인 스토어, 셀렉터, 퍼시스트)
globs: app/**/store/**/*.{ts,tsx}
alwaysApply: false
---

## 목표

- 서버 상태(TanStack Query)와 구분되는 로컬/글로벌 UI 상태 관리 규칙 확립
- 타입 안전, 모듈성(슬라이스), 퍼포먼스(셀렉터) 최적화

## 기본 규칙

- 스토어는 `create`로 모듈 스코프에서 생성 (Next App Router 호환)
- 파일 위치: 전역은 `app/common/store/`, 도메인 한정은 `app/{domain}/store/`
- 상태/액션 인터페이스 분리, 셀렉터로 구독 최소화
- 원격 데이터 캐싱/동기화는 Query가 담당. Zustand에 서버 응답을 장기 저장 금지

## 템플릿

```ts
import { create } from 'zustand';
import { devtools, persist } from 'zustand/middleware';

interface ModalState {
  isOpen: boolean;
  open: () => void;
  close: () => void;
}

export const useModalStore = create<ModalState>()(
  devtools(
    persist(
      (set) => ({
        isOpen: false,
        open: () => set({ isOpen: true }),
        close: () => set({ isOpen: false }),
      }),
      { name: 'modal-store' },
    ),
  ),
);

// 셀렉터 사용 예
export const useIsModalOpen = () => useModalStore((s) => s.isOpen);
```

## 베스트 프랙티스

- 셀렉터 + `shallow` 비교로 리렌더 최소화: `useStore(selector, shallow)`
- 큰 스토어는 슬라이스 패턴으로 분할
- 테스트를 위해 `reset` 액션 제공
- 파일에 `use client`를 넣지 않아도 됨(스토어 자체는 훅이 아님)
- persist 데이터는 Zod로 파싱 후 저장/복원, 버전 마이그레이션 시 `schema.parse`로 업그레이드

## 금지 사항

- 서버 상태를 장기 보관하여 캐시를 우회
- 비순수 액션(랜덤/시간 의존)을 다수 컴포넌트에서 직접 호출
