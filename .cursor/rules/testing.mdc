---
description: 테스트 규칙 (Vitest + RTL, MSW, Playwright)
globs: {tests,e2e}/**/*, app/**/*.{ts,tsx}
alwaysApply: false
---

## 단위/통합 (Vitest + RTL)

- 파일명: `*.test.ts(x)`
- 쿼리 훅 테스트: `QueryClient` 테스트 헬퍼로 감싸기, MSW로 네트워크 모킹
- 접근성 쿼리 우선: `getByRole`, `getByLabelText`, testid는 최후 수단
- 스냅샷 최소화, 상호작용/결과 검증 중심

```ts
// tests/utils.tsx
export function createTestQueryClient() {
  /* retry 0, logger mute 등 */
}
export function renderWithProviders(ui: React.ReactNode) {
  /* Theme, QueryClientProvider */
}
```

## E2E (Playwright)

- 파일명: `*.spec.ts`
- 역할 기반 셀렉터: `getByRole('button', { name: /저장/i })`
- 인증/데이터 시드: 테스트 픽스처로 캡슐화

## MSW

- 핸들러는 도메인별로 분리, 성공/에러 케이스 모두 제공
- 테스트에서 동적으로 핸들러 교체하여 에러 경로 커버

## 픽스처/모킹과 Zod

- MSW 응답을 도메인 Zod 스키마로 검증하여 테스트 데이터 드리프트를 방지합니다
- `safeParse` 실패를 의도적으로 유발하는 에러 케이스를 별도 테스트로 포함합니다
- 무거운 픽스처는 `zod-mock` 등으로 생성하고, 실제 스키마 변경에 자동 추적되도록 합니다
